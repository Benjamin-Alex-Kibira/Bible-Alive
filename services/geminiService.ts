
import { GoogleGenAI } from "@google/genai";
import type { StructuredImagePrompt, VisualPrompt } from '../types';

// --- Image Generation Template ---
function formatPrompt(structured: StructuredImagePrompt): string {
  return `${structured.sceneTitle} â€” ${structured.verseSummary}. Visualize exactly as the scripture describes, imaginative and reverent. Style: ${structured.style}. Mood: ${structured.mood}. Camera: ${structured.camera}. Lighting: ${structured.lighting}. Composition: ${structured.composition}. Constraints: no modern clothing, no logos, no graphic gore, no sexual content, no modern buildings.`;
}

// --- Adapter Interface ---
interface ImageGenerationAdapter {
  generateImage(visualPrompt: VisualPrompt): Promise<string>;
}

// --- Mock Adapter ---
class MockAdapter implements ImageGenerationAdapter {
  async generateImage(visualPrompt: VisualPrompt): Promise<string> {
    console.log("Using Mock Adapter for image generation. Prompt:", visualPrompt.prompt);
    const aspectRatios: { [key: string]: string } = {
      "16:9": "1280/720",
      "4:3": "1024/768",
      "1:1": "1080/1080",
    };
    const ratio = aspectRatios[visualPrompt.aspectRatio || "16:9"] || "1280/720";
    
    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Return a placeholder image URL
    return `https://picsum.photos/${ratio}?random=${Math.random()}`;
  }
}

// --- Gemini Adapter ---
class GeminiAdapter implements ImageGenerationAdapter {
  private ai: GoogleGenAI;

  constructor() {
    if (!process.env.API_KEY) {
      throw new Error("API_KEY environment variable not set for GeminiAdapter.");
    }
    this.ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
  }

  async generateImage(visualPrompt: VisualPrompt): Promise<string> {
    console.log("Using Gemini Adapter for image generation.");
    try {
      const response = await this.ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: visualPrompt.prompt,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/jpeg',
          aspectRatio: visualPrompt.aspectRatio || "16:9",
        },
      });

      if (response.generatedImages && response.generatedImages.length > 0) {
        const base64ImageBytes = response.generatedImages[0].image.imageBytes;
        return `data:image/jpeg;base64,${base64ImageBytes}`;
      } else {
        throw new Error("No image generated by Gemini API.");
      }
    } catch (error) {
      console.error("Error generating image with Gemini:", error);
      // Fallback to a placeholder or error image
      return 'https://picsum.photos/1280/720?grayscale';
    }
  }
}


// --- Service Configuration ---
const useMock = !process.env.API_KEY; 
let adapter: ImageGenerationAdapter;

if (useMock) {
  console.log("Bible Stories Alive is running in MOCK mode. No real API calls will be made.");
  adapter = new MockAdapter();
} else {
  try {
    adapter = new GeminiAdapter();
  } catch (error) {
    console.error("Failed to initialize Gemini Adapter, falling back to Mock Adapter.", error);
    adapter = new MockAdapter();
  }
}

export const generateImage = (visualPrompt: VisualPrompt): Promise<string> => {
  return adapter.generateImage(visualPrompt);
};
